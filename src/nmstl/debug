// -*- mode: C++; -*-

/*
 * NMSTL, the Networking, Messaging, Servers, and Threading Library for C++
 * Copyright (c) 2002 Massachusetts Institute of Technology
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

#ifndef NMSTL_H_DEBUG
#define NMSTL_H_DEBUG

#include <nmstl/internal.h>

/** \file
 * The debugging and logging framework.
 */

NMSTL_NAMESPACE_BEGIN;

//
// NMSTL_DEBUG_LEVEL relies on the G++ statement-expression extension;
// if not available, use this:
// 
// #define NMSTL_DEBUG_LEVEL debug::get().get_level_for_file(NMSTL_DEBUG_FILE_H);
//
#define NMSTL_DEBUG_FILE_H __FILE__
#define NMSTL_DEBUG_LEVEL ({ static int l = debug::get().get_level_for_file(NMSTL_DEBUG_FILE_H); l; })

#ifdef NMSTL_DISABLE_DEBUGGING
  #define NMSTL_IF_DEBUG false
#else
  #define NMSTL_IF_DEBUG (NMSTL_DEBUG_LEVEL >= debug_msg::level)
#endif

#define NMSTL_DEBUG(level) (NMSTL_DEBUG_LEVEL >= debug_msg::level) && debug::get() ^ debug_msg(__FILE__, __LINE__, __PRETTY_FUNCTION__, debug_msg::level, 0)

// --nosub--

// debug-level messages; generally useless to anyone but developers
#define DEBUG    NMSTL_DEBUG(debug)

// informational; possibly useful to end-users
#define INFO     NMSTL_DEBUG(info)

// normal but significant condition
#define NOTICE   NMSTL_DEBUG(notice)

// warning conditions
#define WARN     NMSTL_DEBUG(warn)

// error conditions
#define ERROR    NMSTL_DEBUG(error)

// critical conditions
#define CRIT     NMSTL_DEBUG(crit)

// action must be taken immediately
#define ALERT    NMSTL_DEBUG(alert)

// system is unusable; terminate
#define FATAL    NMSTL_DEBUG(fatal)

// internal error; system is unusable; dump core and terminate
#define COREDUMP NMSTL_DEBUG(coredump)

// --endnosub--

#define ASSERT(a) ((a) || (COREDUMP << "Assertion failed: " #a, true))

#ifndef DOXYGEN_SKIP
/**
 * An internal class used to implement the debugging framework.  (See
 * the debug class for information on the debugging architecture.)
 */
class debug_msg {
    const char *file;
    int line;
    int level;
    const char *module;

    string str;

public:
    // --nosub--
    static const int coredump = -6,
        fatal = -5,
        alert = -4,
        crit = -3,
        error = -2,
        warn = -1,
        notice = 0,
        info = 1,
        debug = 2;

    static const char *level_to_string(int level);
    // --endnosub--

public:
    debug_msg(const char *file, int line, const char *func, int level, const char *module) :
        file(file), line(line), level(level), module(module && *module ? module : 0)
    {}

    template<class T>
    debug_msg& operator << (const T& t) { str += to_string(t); return *this; }

    debug_msg& operator << (const string& s) { str += s; return *this; }
    debug_msg& operator << (const char* s) { str += s; return *this; }

    const char *get_file() const { return file; }
    int get_line() const { return line; }
    int get_level() const { return level; }
    const char *get_module() const { return module; }
    const string& get_string() const { return str; }

    void write(ostream& o, bool show_thread) const;
};
#endif // ndef DOXYGEN_SKIP

/**
 * An internal class used to implement the debugging framework.
 *
 * <p>You shouldn't use this class directly.  Instead, use it like this:
 *
 * \code
 * DEBUG << "foo is " << foo
 * INFO << "Accepted connection from " << addr;
 * WARN << "...";
 * ERROR << "...";
 * FATAL << "Assertion failed";  // Also kills program
 * CORE << "Assertion failed";   // Kills program, leaving core dump
 * \endcode
 *
 * You can use feed just about anything, type-safely, as arguments to
 * <code>&lt;&lt;</code> (consider it varargs, C++ style).
 *
 * This prints messages like the following to standard error:
 *
 * \code
 * debug [file.c:30] Foo is bar
 * info  [file.c:31] Accepted connection from 18.7.16.73:9133
 * warn  [file.c:32] ...
 * error [file.c:33] ...
 * fatal [file.c:34] Assertion failed
 * core! [file.c:35] Assertion failed
 * \endcode
 *
 * Well, actually, by default only warnings, errors, and fatal errors are
 * reported.  To enable more warnings, you can specify a debug level in the
 * <code>DEBUG</code> environment variable (1 to enable info messages,
 * and 2 to enable debug messages).
 *
 * Pretty soon you'll also be able to selectively set debugging levels
 * by file or method, useful for debugging parts of your system without
 * displaying crud from everywhere.
 *
 * Note that <code>DEBUG</code>, <code>INFO</code>,
 * <code>WARN</code>, <code>ERROR</code>, and <code>FATAL</code> are
 * macros.
 */
class debug {
    struct ltstr {
        bool operator()(const char* s1, const char* s2) const
        {
            while (1) {
                char a = *s1;
                char b = *s2;

                if (a == '.') a = 0;
                if (b == '.') b = 0;

                if (a < b) return true;
                if (a == 0 && b == 0) return false;
                if (a > b) return false;

                ++s1;
                ++s2;
            }
        }
    };

    int level;
    bool show_thread;
    ostream* out;

    typedef map<const char*, int, ltstr> Files;
    Files files;

    static debug the_debug;

public:
    debug();
    ~debug();

    static debug& get() { return the_debug; }

    ostream& get_debug_stream() { return *out; }
    void set_debug_stream(ostream& out) { this->out = &out; }

    int get_level_for_file(const char *file);

    void increase_verbosity_to(int level) {
        if (level > this->level)
            this->level = level;
    }

    void set_show_thread(bool show_thread) {
        this->show_thread = show_thread;
    }
    bool get_show_thread() {
        return show_thread;
    }

    bool operator ^ (const debug_msg& msg);
};

NMSTL_NAMESPACE_END;

#endif
